#!/usr/bin/env bash
bash -n "$0" | exit 1

FILENAMELEN=32

function kill_pids() {
	pids=$1

	for pid in $pids;
	do
		kill -9 $pid
	done
}

function create_remove_file_loop() {
	local dbdir=$1

	while true;
	do
		local rand_fname=$(cat /dev/urandom | tr -cd 'a-f0-9' | head -c $FILENAMELEN)

		touch $dbdir/$rand_fname
		sleep .1

		rm $dbdir/$rand_fname
		sleep .1
	done
}

function failexit() {
	rc=$1
	msg=$2

	if ((rc != 0)); then
		echo $msg
		exit $rc
	fi
}

function test_comdb2_files_restricted_file() {
	(
		# Given
		local dbname=$1 dbdir=$2
		echo "restricted blahblah" > $dbdir/foo
		chmod 000 $dbdir/foo
		trap "chmod 777 $dbdir/foo; rm $dbdir/foo" EXIT

		# When
		cdb2sql $dbname local 'select count(*) from comdb2_files' > /dev/null

		# Then
		return $?
	)
}

function test_comdb2_files_large_file() {
	(
		# Given
		local dbname=$1 dbdir=$2
		exp_size=$(( 24 * 1024*1024))
		truncate -s $exp_size $dbdir/largefile
		trap "rm $dbdir/largefile" EXIT

		# When
		res_size=$(cdb2sql -tabs $dbname local "select sum(size) from comdb2_files where filename like '%largefile%'")

		# Then
		query_rc=$?
		if (( query_rc == 0 && res_size == exp_size )); then 
			return 0
		else 
			return 1
		fi
	)
}

function test_comdb2_files_broken_symlink() {
	(
		# Given
		local dbname=$1 dbdir=$2
		ln -s idonutexist $dbdir/link
		trap "rm $dbdir/link" EXIT

		# When
		cdb2sql $dbname local 'select count(*) from comdb2_files' > /dev/null

		# Then
		query_rc=$?
		if (( query_rc != 0 )); then
			return 0
		else
			return 1
		fi
	)
}

function test_comdb2_files_delete_race() {
	(
		# Given
		local dbname=$1 dbdir=$2 n_parallel_threads=10 pids=()
		for i in $(seq $n_parallel_threads);
		do
			create_remove_file_loop $dbdir &
			pids[${i}]=$!
		done
		pid_str="${pids[@]}"
		trap "kill_pids \"$pid_str\"" EXIT

		sleep .1

		# When
		cdb2sql $dbname local 'select count(*) from comdb2_files' > /dev/null

		# Then
		query_rc=$?
		return $query_rc
	)
}

TESTS=$(compgen -A function | grep -oh "test_\w*")

function runtest {
	local dbname=$1 dbdir=$2

	for testcase in $TESTS;
	do
		$testcase $dbname $dbdir
		failexit $? "Failed $testcase"
		echo "Passed $testcase"
	done
}

function main() {
	local dbname=$1
	if [ -z "$CLUSTER" ];
	then
		runtest $dbname $DBDIR
	else
		node=`echo $CLUSTER | awk '{ print $1}'`
		ssh $node "export PATH=$PATH; export dir=$DBDIR; export dbnm=$dbname; $(typeset -f runtest); runtest"
	fi
	
	rc=$?
	return $rc
}

main $1
