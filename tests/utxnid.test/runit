#!/usr/bin/env bash
bash -n "$0" | exit 1
source ${TESTSROOTDIR}/tools/cluster_utils.sh
a_dbn=$1
ckp_rectype=2011
downgrade_wait_time=5
checkpoint_wait_time=1
kill_wait_time=10

#####################################################

kill_restart_cluster()
{
    for node in $CLUSTER ; do
        echo "killrestart nodes $node"
        kill_restart_node $node $kill_wait_time &
    done
    sleep $kill_wait_time
    # select 1 all nodes
    for node in $CLUSTER ; do
        out=$(cdb2sql ${CDB2_OPTIONS} --tabs --host $node $DBNAME  'select 1' 2>/dev/null)
        # wait until we can query it
        echo "$DBNAME: waiting until ready"
        while [[ "$out" != "1" ]]; do
            sleep $kill_wait_time
            out=$(cdb2sql ${CDB2_OPTIONS} --tabs --host $node $DBNAME  'select 1' 2>/dev/null)
        done
    done
}

function failif
{
	if [[ $1 -ne 0 ]]; then
		exit 1
	fi
}

function insert_values
{
	for (( i=0; i<$1; i++))
	do
		cdb2sql ${CDB2_OPTIONS} $a_dbn default "insert into "$2" values(1)"
	done
}

function verify_unique_utxnid_per_txnid
{
        NUM_DUPLICATE_UTXNIDS=$(cdb2sql ${CDB2_OPTIONS} $a_dbn default 'select COUNT(*) from comdb2_transaction_logs AS a, comdb2_transaction_logs AS b WHERE (a.txnid>0) and (a.utxnid!=b.utxnid and a.txnid=b.txnid) or (a.utxnid=b.utxnid and a.txnid!=b.txnid)')
        failif $?
        NUM_DUPLICATE_UTXNIDS=$(echo $NUM_DUPLICATE_UTXNIDS | grep -oP "[0-9]+\)$")
        NUM_DUPLICATE_UTXNIDS=${NUM_DUPLICATE_UTXNIDS:0:-1}

        NUM_TXNS_WITHOUT_UTXNID=$(cdb2sql ${CDB2_OPTIONS} $a_dbn default 'select COUNT(*) from comdb2_transaction_logs WHERE txnid>0 and utxnid=0')
        failif $?
        NUM_TXNS_WITHOUT_UTXNID=$(echo $NUM_TXNS_WITHOUT_UTXNID | grep -oP "[0-9]+\)$")
        NUM_TXNS_WITHOUT_UTXNID=${NUM_TXNS_WITHOUT_UTXNID:0:-1}
        failif $NUM_DUPLICATE_UTXNIDS
        failif $NUM_TXNS_WITHOUT_UTXNID
}

function verify_utxnid_under_limit_after_timestamp
{
        NUM_INVALID_IDS=$(cdb2sql ${CDB2_OPTIONS} $a_dbn default "select COUNT(*) from comdb2_transaction_logs A where A.timestamp>"$1" and A.utxnid!=0 and A.utxnid<"$2" and not EXISTS(select 1 from comdb2_transaction_logs B where A.txnid=B.txnid and B.timestamp<="$1")")
        failif $?
        NUM_INVALID_IDS=$(echo $NUM_INVALID_IDS | grep -oP "[0-9]+\)$")
        NUM_INVALID_IDS=${NUM_INVALID_IDS:0:-1}
        failif $NUM_INVALID_IDS
}

function bounce {
	if [[ -n "$CLUSTER" ]] ; then
		kill_restart_cluster 
	else
		kill_restart_node $(hostname) $kill_wait_time
	fi
}

function master_swing {
	oldmaster=$(get_master)
	master=$oldmaster
	while [[ $master == $oldmaster ]]; do
		cdb2sql ${CDB2_OPTIONS} --host $master $a_dbn "exec procedure sys.cmd.send('downgrade')"
		sleep $downgrade_wait_time
		master=$(get_master)
	done
}

function verify_utxnids_after_action {
	# Send checkpoint, get max utxnid and timestamp, and then take action on cluster.
	cdb2sql ${CDB2_OPTIONS} $a_dbn default 'exec procedure sys.cmd.send("bdb checkpoint")'
	sleep $checkpoint_wait_time
	insert_values 1 t
	res=$(cdb2sql ${CDB2_OPTIONS} $a_dbn default "select MAX(utxnid) from comdb2_transaction_logs")
	failif $?
	CKP_MAX_UTXNID=$(echo $res | grep -oP "\=(.*?)\)")
	CKP_MAX_UTXNID=${CKP_MAX_UTXNID:1:-1}
	res=$(cdb2sql ${CDB2_OPTIONS} $a_dbn default "select MAX(timestamp) from comdb2_transaction_logs")
	failif $?
	CKP_TIME=$(echo $res | grep -oP "\=(.*?)\)")
	CKP_TIME=${CKP_TIME:1:-1}

	# Do action
	$1

	# Run transactions
	insert_values 100 t

	# Validate transaction IDs: Make sure that transactions after checkpoint have utxnids greater than the max utxnid at checkpoint.
	verify_unique_utxnid_per_txnid
	verify_utxnid_under_limit_after_timestamp $CKP_TIME $CKP_MAX_UTXNID
}

function runtest
{
	cdb2sql ${CDB2_OPTIONS} $a_dbn default 'create table t(i int)'
	insert_values 100 t

	# Validate utxnids
	verify_unique_utxnid_per_txnid

	# Validate utxnids after a bounce and master swing
	verify_utxnids_after_action bounce
	verify_utxnids_after_action master_swing
}

runtest
exit 0
