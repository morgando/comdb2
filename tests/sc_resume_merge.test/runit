#!/usr/bin/env bash

source ${TESTSROOTDIR}/tools/runit_common.sh
source ${TESTSROOTDIR}/tools/cluster_utils.sh

set -ex

[ -z "${CLUSTER}" ] && { echo "Test requires a cluster"; exit 0; }

dbnm=$1

restart_cluster() {
	set +e
	for node in ${CLUSTER} ; do
		kill_restart_node ${node} &
	done
	set -e

	for node in ${CLUSTER} ; do
		until cdb2sql --host ${node} ${CDB2_OPTIONS} ${dbnm} default "select 1";
		do
			:
		done
	done
}

test_partition_merge_resume() {
	# Given
	local starttime
	starttime=$(get_timestamp 120)

	local master
	master=`cdb2sql --tabs ${CDB2_OPTIONS} $dbnm default 'SELECT host FROM comdb2_cluster WHERE is_master="Y"'`

	cdb2sql $dbnm --host $master "EXEC PROCEDURE sys.cmd.send('convert_record_sleep 1')"
	cdb2sql ${CDB2_OPTIONS} ${dbnm} default "create table t(a int) partitioned by time period 'daily' retention 2 start '${starttime}'"
	cdb2sql ${CDB2_OPTIONS} $dbnm default "insert into t values (1)"

	# When
	cdb2sql ${CDB2_OPTIONS} ${dbnm} default "alter table t partitioned by none" &
	waitpid=$!
	sleep 1
	restart_cluster &> /dev/null

	# Then
	$( ! wait ${waitpid} ) # Assert that merge did not succeed before cluster was bounced

	local timepart
	timepart=$(cdb2sql --tabs ${CDB2_OPTIONS} ${dbnm} default "select * from comdb2_timepartitions where name='t'")
	[[ -n ${timepart} ]] # Assert that merge did not complete on resume

	# Cleanup
	cdb2sql ${CDB2_OPTIONS} ${dbnm} default "exec procedure sys.cmd.send('debug_sleep_on_partition_merge off')"
	cdb2sql ${CDB2_OPTIONS} ${dbnm} default "drop table t"
}

test_partition_merge_resume
