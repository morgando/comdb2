#!/usr/bin/env bash
bash -n "$0" | exit 1
source ${TESTSROOTDIR}/tools/cluster_utils.sh

set -e

# Grab my database name.
dbnm=$1

# Try this many times to see an archive 
seen_iter=${2:-300}

# Try this many times to see an archive 
clean_iter=${3:-10}

# Let the testcase timeout fail us
target=5

seen_count=0
seen_archives=0
seen_clear=0

count=0
cdb2sql ${CDB2_OPTIONS} $dbnm default 'select comdb2_dbname()'

master=`cdb2sql --tabs ${CDB2_OPTIONS} $dbnm default 'exec procedure sys.cmd.send("bdb cluster")' | grep MASTER | cut -f1 -d":" | xargs echo`

kill_restart_cluster()
{
    for node in $CLUSTER ; do
        echo "killrestart nodes $node"
        kill_restart_node $node $kill_wait_time &
    done
    sleep $kill_wait_time
    # select 1 all nodes
    for node in $CLUSTER ; do
        out=$(cdb2sql ${CDB2_OPTIONS} --tabs --host $node $DBNAME  'select 1' 2>/dev/null)
        # wait until we can query it
        echo "$DBNAME: waiting until ready"
        while [[ "$out" != "1" ]]; do
            sleep $kill_wait_time
            out=$(cdb2sql ${CDB2_OPTIONS} --tabs --host $node $DBNAME  'select 1' 2>/dev/null)
        done
    done
}

function failif
{
	if [[ $1 -ne 0 ]]; then
		exit 1
	fi
}

function bounce {
	if [[ -n "$CLUSTER" ]] ; then
		kill_restart_cluster 
	else
		kill_restart_node $(hostname) $kill_wait_time
	fi
}

# Count the number of logs that are ready to archive
function count_archive
{
    typeset dbnm=$1
    cdb2sql --tabs ${CDB2_OPTIONS} --host $master $dbnm 'exec procedure sys.cmd.send("bdb log_archive")' | egrep 'log.00000' | wc -l
}

######################
# TEST 1 - child txns
######################

function setup
{
	cdb2sql ${CDB2_OPTIONS} $dbnm default 'create table t(int utxnid, int childutxnid)'
	cdb2sql ${CDB2_OPTIONS} $dbnm default 'insert into t select utxnid, childutxnid from comdb2_transaction_logs where childutxnid is not null'
}

function verify_child_commit_lsn_is_parent_commit_lsn
{

	res=$(cdb2sql ${CDB2_OPTIONS} $dbnm default 'select COUNT(*) from comdb2_transaction_commit parent, comdb2_transaction_commit child, t logs where logs.utxnid=parent.utxnid and logs.childutxnid=child.utxnid and (parent.commitlsnfile!=child.commitlsnfile or parent.commitlsnoffset!=child.commitlsnoffset)')
	numinvalidchildren=$(echo $res | grep -oP "[0-9]+\)$")
	numinvalidchildren=${numinvalidchildren:0:-1}
	failif numinvalidchildren
}

setup
verify_child_commit_lsn_is_parent_commit_lsn

cdb2sql ${CDB2_OPTIONS} $dbnm default 'exec procedure sys.cmd.send("bdb checkpoint")'
sleep 3
bounce

res=$(cdb2sql ${CDB2_OPTIONS} $dbnm default 'select COUNT(*) from comdb2_transaction_commit commits, t logs where commits.utxnid=t.childutxnid')
numrecoveredchildren=$(echo $res | grep -oP "[0-9]+\)$")
echo "numrecoveredchildren $numrecoveredchildren"

verify_child_commit_lsn_is_parent_commit_lsn

#master_swing

#setup
#verify_child_commit_lsn_is_parent_commit_lsn
#teardown

#####################
# TEST 2 - log deletion
#####################


# Let the test
while [[ "$seen_archives" -eq "0" && "$count" -lt "$seen_iter" ]]
do
    #comdb2sc -m $dbnm send pushlogs $target
    cdb2sql --tabs ${CDB2_OPTIONS} --host $master $dbnm "exec procedure sys.cmd.send('pushlogs $target')"
    sleep 3

    res=$(cdb2sql ${CDB2_OPTIONS} $dbnm default 'select COUNT(DISTINCT commitlsnfile), MAX(commitlsnfile) from comdb2_transaction_commit')
    numfilesinmap=$(echo $res | grep -oP "[0-9]+\,")
    numfilesinmap=${numfilesinmap:0:-1}
    maxfileinmap=$(echo $res | grep -oP "[0-9]+\)$")
    maxfileinmap=${maxfileinmap:0:-1}

    seen_count="$(count_archive $dbnm)"

    # Didn't see anything that needed to be archived: try again
    if [[ "$seen_count" == "0" ]]; then

        let target=target+1
        let count=count+1

    # Saw something that needed to be archived: break out of loop
    else

        # Break out of this loop
        seen_archives=1

    fi

done


if [[ "$seen_archives" == "0" ]]; then

    echo "Never saw any archives, failing testcase"
    exit 1

fi

echo "$dbnm has accrued $seen_count logfiles."

seencountsave=$seen_count

cluster=`cdb2sql --tabs ${CDB2_OPTIONS} $dbnm default 'exec procedure sys.cmd.send("bdb cluster")' | grep lsn | cut -f1 -d':' `
for node in $cluster ; do 
    cdb2sql ${CDB2_OPTIONS} --host $node $dbnm 'exec procedure sys.cmd.send("bdb setattr MIN_KEEP_LOGS 1")'
    cdb2sql ${CDB2_OPTIONS} --host $node $dbnm 'exec procedure sys.cmd.send("flush")'
done


# Sleep a bit
sleep 10

count=0

while [[ "$seen_clear" == "0" && "$count" -lt "$clean_iter" ]]; do

    seen_count="$(count_archive $dbnm)"

    if [ "$seen_count" -eq "0" ]; then

        seen_clear=1

    else

        echo "Waiting for $seen_count logfiles to be deleted."

        for node in $cluster ; do 
            cdb2sql --tabs ${CDB2_OPTIONS} --host $node $dbnm "exec procedure sys.cmd.send('flush')"
        done

        sleep 30
        let count=count+1

    fi

done

if [[ "$seen_clear" == "0" ]]; then

    echo "Archives were never cleared, failing testcase"
    exit 1

fi

res=$(cdb2sql ${CDB2_OPTIONS} $dbnm default 'select COUNT(DISTINCT commitlsnfile) from comdb2_transaction_commit where commitlsnfile<="$maxfileinmap"')
numremainingfiles=$(echo $res | grep -oP "[0-9]+\)$")
numremainingfiles=${numremainingfiles:0:-1}

if ((numfilesinmap - numremainingfiles < seencountsave)); then
    exit 1
fi




