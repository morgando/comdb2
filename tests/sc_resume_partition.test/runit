#!/usr/bin/env bash

source ${TESTSROOTDIR}/tools/runit_common.sh
source ${TESTSROOTDIR}/tools/cluster_utils.sh

set -ex

[ -z "${CLUSTER}" ] && { echo "Test requires a cluster"; exit 0; }

dbnm=$1

restart_cluster() {
	set +e
	for node in ${CLUSTER} ; do
		kill_restart_node ${node} &
	done
	set -e

	sleep 2

	wait_for_cluster
}

test_partition_merge_resume() {
	# Given
	local -r num_shards=$1
	local starttime
	starttime=$(get_timestamp 120)
	local master
	master=`cdb2sql --tabs ${CDB2_OPTIONS} $dbnm default 'SELECT host FROM comdb2_cluster WHERE is_master="Y"'`

	cdb2sql $dbnm --host $master "EXEC PROCEDURE sys.cmd.send('convert_record_sleep 1')"
	cdb2sql ${CDB2_OPTIONS} ${dbnm} default "create table t(a int) partitioned by time period 'daily' retention ${num_shards} start '${starttime}'"

	local -r records_per_shard=300
	for i in $(seq 0 1 $((num_shards-1)));
	do
		local shard
		shard=$(cdb2sql --tabs ${CDB2_OPTIONS} ${dbnm} default "select shardname from comdb2_timepartshards limit 1 offset ${i}")

		for j in $(seq 0 1 $((records_per_shard-1)));
		do
			cdb2sql ${CDB2_OPTIONS} ${dbnm} default "insert into '${shard}' values(1)"
		done
	done
	cdb2sql ${CDB2_OPTIONS} ${dbnm} default "select count(*) from t"

	# When
	cdb2sql ${CDB2_OPTIONS} ${dbnm} default "alter table t partitioned by none" &
	local -r waitpid=$!
	sleep 20

	restart_cluster &> /dev/null

	# Then
	if wait ${waitpid};
	then
		echo "FAIL: Merge succeeded before cluster bounced. Test is buggy."
		return 1
	fi

	local timepart
	timepart=$(cdb2sql --tabs ${CDB2_OPTIONS} ${dbnm} default "select * from comdb2_timepartitions where name='t'")
	if [[ -n ${timepart} ]];
	then
		echo "FAIL: Found time partition that should not exist"
		return 1
	fi

	local num_records
	num_records=$(cdb2sql --tabs ${CDB2_OPTIONS} ${dbnm} default "select count(*) from t")
	if (( num_records != $((records_per_shard * num_shards)) ));
	then
		echo "FAIL: Unexpected number of records after partition merge"
		return 1
	fi

	# Cleanup
	cdb2sql ${CDB2_OPTIONS} ${dbnm} default "drop table t"
}

main() {
	local num_shards=10
	test_partition_merge_resume ${num_shards}

	num_shards=5 # Will trigger concurrent mode
	test_partition_merge_resume ${num_shards}
}

main
